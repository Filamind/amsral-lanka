import apiClient from '../config/api';

// Customer interface
export interface Customer {
  id?: number;
  customerCode?: string; // Auto-generated by backend
  firstName: string;
  lastName: string;
  phone: string;
  email?: string;
  address?: string;
  mapLink?: string;
  notes?: string;
  isActive?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

// Pagination interface
export interface PaginationInfo {
  currentPage: number;
  totalPages: number;
  totalItems: number;
  itemsPerPage: number;
  hasNextPage: boolean;
  hasPrevPage: boolean;
}

// Customer fetch options
export interface CustomerFetchOptions {
  page?: number;
  limit?: number;
  isActive?: boolean | null;
  isDeleted?: boolean;
  search?: string;
}

// Customer response interface
export interface CustomerResponse {
  customers: Customer[];
  pagination: PaginationInfo;
}

// Customer service class
export class CustomerService {
  static async getAllCustomers(options: CustomerFetchOptions = {}): Promise<CustomerResponse> {
    try {
      const params = new URLSearchParams();
      
      if (options.page) params.append('page', options.page.toString());
      if (options.limit) params.append('limit', options.limit.toString());
      if (options.isActive !== null && options.isActive !== undefined) {
        params.append('isActive', options.isActive.toString());
      }
      if (options.isDeleted !== undefined) params.append('isDeleted', options.isDeleted.toString());
      if (options.search) params.append('search', options.search);

      const response = await apiClient.get(`/customers?${params.toString()}`);
      console.log('Customer API Response:', response.data); // Debug log
      
      // Handle different response structures
      if (response.data && response.data.data && response.data.data.customers && Array.isArray(response.data.data.customers)) {
        return {
          customers: response.data.data.customers,
          pagination: response.data.data.pagination || {
            currentPage: 1,
            totalPages: 1,
            totalItems: response.data.data.customers.length,
            itemsPerPage: options.limit || 10,
            hasNextPage: false,
            hasPrevPage: false
          }
        };
      } else if (Array.isArray(response.data)) {
        return {
          customers: response.data,
          pagination: {
            currentPage: 1,
            totalPages: 1,
            totalItems: response.data.length,
            itemsPerPage: options.limit || 10,
            hasNextPage: false,
            hasPrevPage: false
          }
        };
      } else {
        console.warn('Unexpected API response structure:', response.data);
        return {
          customers: [],
          pagination: {
            currentPage: 1,
            totalPages: 1,
            totalItems: 0,
            itemsPerPage: options.limit || 10,
            hasNextPage: false,
            hasPrevPage: false
          }
        };
      }
    } catch (error) {
      console.error('Error fetching customers:', error);
      throw error;
    }
  }

  static async createCustomer(customer: Omit<Customer, 'id' | 'customerCode' | 'createdAt' | 'updatedAt'>): Promise<Customer> {
    try {
      const response = await apiClient.post('/customers', customer);
      console.log('Create Customer API Response:', response.data); // Debug log
      
      // Handle different response structures
      if (response.data && response.data.data) {
        return response.data.data;
      } else if (response.data && response.data.id) {
        return response.data;
      } else {
        console.warn('Unexpected API response structure:', response.data);
        throw new Error('Unexpected response format');
      }
    } catch (error) {
      console.error('Error creating customer:', error);
      throw error;
    }
  }

  static async updateCustomer(id: number, customer: Partial<Customer>): Promise<Customer> {
    try {
      const response = await apiClient.put(`/customers/${id}`, customer);
      console.log('Update Customer API Response:', response.data); // Debug log
      
      // Handle different response structures
      if (response.data && response.data.data) {
        return response.data.data;
      } else if (response.data && response.data.id) {
        return response.data;
      } else {
        console.warn('Unexpected API response structure:', response.data);
        throw new Error('Unexpected response format');
      }
    } catch (error) {
      console.error('Error updating customer:', error);
      throw error;
    }
  }

  static async deleteCustomer(id: number): Promise<void> {
    try {
      await apiClient.delete(`/customers/${id}`);
    } catch (error) {
      console.error('Error deleting customer:', error);
      throw error;
    }
  }
}

export default CustomerService;
