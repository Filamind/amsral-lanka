import apiClient from '../config/api';

// Employee interface
export interface Employee {
  id?: number;
  employeeId?: string; // Auto-generated by backend
  firstName: string;
  lastName: string;
  phone: string;
  email?: string;
  hireDate?: string;
  dateOfBirth?: string;
  address?: string;
  emergencyContact?: string;
  isActive?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

// Pagination interface
export interface PaginationInfo {
  currentPage: number;
  totalPages: number;
  totalItems: number;
  itemsPerPage: number;
  hasNextPage: boolean;
  hasPrevPage: boolean;
}

// Employee list response interface
export interface EmployeeListResponse {
  employees: Employee[];
  pagination: PaginationInfo;
}

// Employee fetch options interface
export interface EmployeeFetchOptions {
  limit?: number;
  offset?: number;
  page?: number;
  isActive?: boolean | null;
  isDeleted?: boolean;
  department?: string | null;
  position?: string | null;
  search?: string; // Add search support
}

// Employee service class
export class EmployeeService {
  static async getAllEmployees(options: EmployeeFetchOptions = {}): Promise<EmployeeListResponse> {
    try {
      // Build query parameters
      const params = new URLSearchParams();
      
      if (options.limit !== undefined) params.append('limit', options.limit.toString());
      if (options.offset !== undefined) params.append('offset', options.offset.toString());
      if (options.page !== undefined) params.append('page', options.page.toString());
      if (options.isActive !== undefined && options.isActive !== null) {
        params.append('isActive', options.isActive.toString());
      }
      if (options.isDeleted !== undefined) params.append('isDeleted', options.isDeleted.toString());
      if (options.department) params.append('department', options.department);
      if (options.position) params.append('position', options.position);

      const queryString = params.toString();
      const url = queryString ? `/employees?${queryString}` : '/employees';
      
      const response = await apiClient.get(url);
      console.log('API Response:', response.data); // Debug log
      
      // Handle different response structures
      if (response.data && response.data.data) {
        const { data } = response.data;
        
        if (data.employees && Array.isArray(data.employees) && data.pagination) {
          // New paginated response structure
          return {
            employees: data.employees,
            pagination: data.pagination
          };
        } else if (Array.isArray(data)) {
          // Legacy response structure (array of employees)
          return {
            employees: data,
            pagination: {
              currentPage: 1,
              totalPages: 1,
              totalItems: data.length,
              itemsPerPage: data.length,
              hasNextPage: false,
              hasPrevPage: false
            }
          };
        }
      } else if (Array.isArray(response.data)) {
        // Direct array response
        return {
          employees: response.data,
          pagination: {
            currentPage: 1,
            totalPages: 1,
            totalItems: response.data.length,
            itemsPerPage: response.data.length,
            hasNextPage: false,
            hasPrevPage: false
          }
        };
      }
      
      console.warn('Unexpected API response structure:', response.data);
      return {
        employees: [],
        pagination: {
          currentPage: 1,
          totalPages: 1,
          totalItems: 0,
          itemsPerPage: 10,
          hasNextPage: false,
          hasPrevPage: false
        }
      };
    } catch (error) {
      console.error('Error fetching employees:', error);
      throw error;
    }
  }

  static async createEmployee(employee: Omit<Employee, 'id' | 'employeeId' | 'createdAt' | 'updatedAt'>): Promise<Employee> {
    try {
      const response = await apiClient.post('/employees', employee);
      console.log('Create Employee API Response:', response.data); // Debug log
      
      // Handle different response structures
      if (response.data && response.data.data) {
        return response.data.data;
      } else if (response.data && response.data.id) {
        return response.data;
      } else {
        console.warn('Unexpected API response structure:', response.data);
        throw new Error('Unexpected response format');
      }
    } catch (error) {
      console.error('Error creating employee:', error);
      throw error;
    }
  }

  static async updateEmployee(id: number, employee: Partial<Employee>): Promise<Employee> {
    try {
      const response = await apiClient.put(`/employees/${id}`, employee);
      console.log('Update Employee API Response:', response.data); // Debug log
      
      // Handle different response structures
      if (response.data && response.data.data) {
        return response.data.data;
      } else if (response.data && response.data.id) {
        return response.data;
      } else {
        console.warn('Unexpected API response structure:', response.data);
        throw new Error('Unexpected response format');
      }
    } catch (error) {
      console.error('Error updating employee:', error);
      throw error;
    }
  }

  static async deleteEmployee(id: number): Promise<void> {
    try {
      const response = await apiClient.delete(`/employees/${id}`);
      console.log('Delete Employee API Response:', response.data); // Debug log
    } catch (error) {
      console.error('Error deleting employee:', error);
      throw error;
    }
  }
}

export default EmployeeService;
